{"version":3,"sources":["views/apps/usermanage/user-list/UserListView.js"],"names":["UserListView","state","rowData","post","pageSize","isVisible","reload","collapse","status","role","selectStatus","verified","department","defaultColDef","sortable","searchVal","columnDefs","headerName","field","width","filter","checkboxSelection","headerCheckboxSelectionFilteredOnly","headerCheckboxSelection","cellRendererFramework","params","console","log","className","src","data","mediaUrls","alt","height","name","value","size","onClick","history","push","selectedData","gridApi","getSelectedRows","updateRowData","remove","onGridReady","api","gridColumnApi","columnApi","filterData","column","val","modelObj","type","getFilterInstance","setModel","onFilterChanged","filterSize","paginationSetPageSize","Number","setState","updateSearchQuery","setQuickFilter","refreshCard","setTimeout","toggleCollapse","onEntered","onEntering","onExiting","onExited","removeCard","a","axios","get","then","response","res","catch","err","this","sm","tag","right","placeholder","onChange","e","target","color","Consumer","context","gridOptions","rowSelection","colResizeDefault","animateRows","floatingFilter","pagination","pivotPanelShow","paginationPageSize","resizable","enableRtl","direction","React","Component"],"mappings":"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","file":"static/js/144.54dae449.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  CardTitle,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  UncontrolledDropdown,\r\n  UncontrolledButtonDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  Collapse,\r\n  Spinner,\r\n} from \"reactstrap\";\r\nimport axios from \"axios\";\r\nimport { ContextLayout } from \"../../../../utility/context/Layout\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport {\r\n  Edit,\r\n  Trash2,\r\n  ChevronDown,\r\n  Clipboard,\r\n  Printer,\r\n  Download,\r\n  RotateCw,\r\n  X,\r\n} from \"react-feather\";\r\nimport classnames from \"classnames\";\r\nimport { history } from \"../../../../history\";\r\nimport \"../../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\r\nimport \"../../../../assets/scss/pages/users.scss\";\r\nclass UserListView extends React.Component {\r\n  state = {\r\n    rowData: null,\r\n    post: [],\r\n\r\n    pageSize: 20,\r\n    isVisible: true,\r\n    reload: false,\r\n    collapse: true,\r\n    status: \"Opened\",\r\n    role: \"All\",\r\n    selectStatus: \"All\",\r\n    verified: \"All\",\r\n    department: \"All\",\r\n    defaultColDef: {\r\n      sortable: true,\r\n    },\r\n    searchVal: \"\",\r\n    columnDefs: [\r\n      {\r\n        headerName: \"ID\",\r\n        field: \"id\",\r\n        width: 150,\r\n        filter: true,\r\n        checkboxSelection: true,\r\n        headerCheckboxSelectionFilteredOnly: true,\r\n        headerCheckboxSelection: true,\r\n      },\r\n      {\r\n        headerName: \"Image\",\r\n        field: \"mediaUrls\",\r\n        filter: true,\r\n        width: 120,\r\n        cellRendererFramework: (params) => {\r\n          {\r\n            console.log(params);\r\n          }\r\n          return (\r\n            <div\r\n              className=\"d-flex align-items-center cursor-pointer\"\r\n              // onClick={() => history.push(\"/app/user/edit\")}\r\n            >\r\n              <img\r\n                className=\"rounded-circle mr-50 mt-1\"\r\n                src={params.data?.mediaUrls[0]}\r\n                // src={params.data.avatar}\r\n                alt=\"user avatar\"\r\n                height=\"35\"\r\n                width=\"35\"\r\n              />\r\n              <span>{params.data.name}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Post\",\r\n        field: \"post\",\r\n        filter: true,\r\n        width: 250,\r\n      },\r\n      {\r\n        headerName: \"Name\",\r\n        field: \"name\",\r\n        filter: true,\r\n        width: 200,\r\n      },\r\n      {\r\n        headerName: \"Schedule\",\r\n        field: \"scheduleDate.utc\",\r\n        filter: true,\r\n        width: 200,\r\n      },\r\n      {\r\n        headerName: \"Role\",\r\n        field: \"role\",\r\n        filter: true,\r\n        width: 150,\r\n      },\r\n      {\r\n        headerName: \"Status\",\r\n        field: \"status\",\r\n        filter: true,\r\n        width: 150,\r\n        cellRendererFramework: (params) => {\r\n          return params.value === \"active\" ? (\r\n            <div className=\"badge badge-pill badge-light-success\">\r\n              {params.value}\r\n            </div>\r\n          ) : params.value === \"blocked\" ? (\r\n            <div className=\"badge badge-pill badge-light-danger\">\r\n              {params.value}\r\n            </div>\r\n          ) : params.value === \"deactivated\" ? (\r\n            <div className=\"badge badge-pill badge-light-warning\">\r\n              {params.value}\r\n            </div>\r\n          ) : null;\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Verified\",\r\n        field: \"is_verified\",\r\n        filter: true,\r\n        width: 125,\r\n        cellRendererFramework: (params) => {\r\n          return params.value === true ? (\r\n            <div className=\"bullet bullet-sm bullet-primary\"></div>\r\n          ) : params.value === false ? (\r\n            <div className=\"bullet bullet-sm bullet-secondary\"></div>\r\n          ) : null;\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Department\",\r\n        field: \"department\",\r\n        filter: true,\r\n        width: 160,\r\n      },\r\n      {\r\n        headerName: \"Actions\",\r\n        field: \"transactions\",\r\n        width: 150,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"actions cursor-pointer\">\r\n              <Edit\r\n                className=\"mr-50\"\r\n                size={15}\r\n                onClick={() => history.push(\"/app/user/edit\")}\r\n              />\r\n              <Trash2\r\n                size={15}\r\n                onClick={() => {\r\n                  let selectedData = this.gridApi.getSelectedRows();\r\n                  this.gridApi.updateRowData({ remove: selectedData });\r\n                }}\r\n              />\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  componentDidMount() {}\r\n  async componentDidMount() {\r\n    await axios.get(\"api/users/list\").then((response) => {\r\n      let rowData = response.data;\r\n      console.log(rowData);\r\n      this.setState({ rowData });\r\n    });\r\n    await axios\r\n      .get(`http://13.127.168.84:3000/user/history`)\r\n      .then((res) => {\r\n        console.log(res.data);\r\n        this.setState({ post: res.data });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  onGridReady = (params) => {\r\n    this.gridApi = params.api;\r\n    this.gridColumnApi = params.columnApi;\r\n  };\r\n\r\n  filterData = (column, val) => {\r\n    var filter = this.gridApi.getFilterInstance(column);\r\n    var modelObj = null;\r\n    if (val !== \"all\") {\r\n      modelObj = {\r\n        type: \"equals\",\r\n        filter: val,\r\n      };\r\n    }\r\n    filter.setModel(modelObj);\r\n    this.gridApi.onFilterChanged();\r\n  };\r\n\r\n  filterSize = (val) => {\r\n    if (this.gridApi) {\r\n      this.gridApi.paginationSetPageSize(Number(val));\r\n      this.setState({\r\n        pageSize: val,\r\n      });\r\n    }\r\n  };\r\n  updateSearchQuery = (val) => {\r\n    this.gridApi.setQuickFilter(val);\r\n    this.setState({\r\n      searchVal: val,\r\n    });\r\n  };\r\n\r\n  refreshCard = () => {\r\n    this.setState({ reload: true });\r\n    setTimeout(() => {\r\n      this.setState({\r\n        reload: false,\r\n        role: \"All\",\r\n        selectStatus: \"All\",\r\n        verified: \"All\",\r\n        department: \"All\",\r\n      });\r\n    }, 500);\r\n  };\r\n\r\n  toggleCollapse = () => {\r\n    this.setState((state) => ({ collapse: !state.collapse }));\r\n  };\r\n  onEntered = () => {\r\n    this.setState({ status: \"Opened\" });\r\n  };\r\n  onEntering = () => {\r\n    this.setState({ status: \"Opening...\" });\r\n  };\r\n\r\n  onEntered = () => {\r\n    this.setState({ status: \"Opened\" });\r\n  };\r\n  onExiting = () => {\r\n    this.setState({ status: \"Closing...\" });\r\n  };\r\n  onExited = () => {\r\n    this.setState({ status: \"Closed\" });\r\n  };\r\n  removeCard = () => {\r\n    this.setState({ isVisible: false });\r\n  };\r\n\r\n  render() {\r\n    const { post, rowData, columnDefs, defaultColDef, pageSize } = this.state;\r\n    return (\r\n      <Row className=\"app-user-list\">\r\n        {/* <Col sm=\"12\">\r\n          <Card\r\n            className={classnames(\"card-action card-reload\", {\r\n              \"d-none\": this.state.isVisible === false,\r\n              \"card-collapsed\": this.state.status === \"Closed\",\r\n              closing: this.state.status === \"Closing...\",\r\n              opening: this.state.status === \"Opening...\",\r\n              refreshing: this.state.reload,\r\n            })}\r\n          >\r\n            <CardHeader>\r\n              <CardTitle>Filters</CardTitle>\r\n              <div className=\"actions\">\r\n                <ChevronDown\r\n                  className=\"collapse-icon mr-50\"\r\n                  size={15}\r\n                  onClick={this.toggleCollapse}\r\n                />\r\n                <RotateCw\r\n                  className=\"mr-50\"\r\n                  size={15}\r\n                  onClick={() => {\r\n                    this.refreshCard();\r\n                    this.gridApi.setFilterModel(null);\r\n                  }}\r\n                />\r\n                <X size={15} onClick={this.removeCard} />\r\n              </div>\r\n            </CardHeader>\r\n            <Collapse\r\n              isOpen={this.state.collapse}\r\n              onExited={this.onExited}\r\n              onEntered={this.onEntered}\r\n              onExiting={this.onExiting}\r\n              onEntering={this.onEntering}\r\n            >\r\n              <CardBody>\r\n                {this.state.reload ? (\r\n                  <Spinner color=\"primary\" className=\"reload-spinner\" />\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n                <Row>\r\n                  <Col lg=\"3\" md=\"6\" sm=\"12\">\r\n                    <FormGroup className=\"mb-0\">\r\n                      <Label for=\"role\">Role</Label>\r\n                      <Input\r\n                        type=\"select\"\r\n                        name=\"role\"\r\n                        id=\"role\"\r\n                        value={this.state.role}\r\n                        onChange={(e) => {\r\n                          this.setState(\r\n                            {\r\n                              role: e.target.value,\r\n                            },\r\n                            () =>\r\n                              this.filterData(\r\n                                \"role\",\r\n                                this.state.role.toLowerCase()\r\n                              )\r\n                          );\r\n                        }}\r\n                      >\r\n                        <option value=\"All\">All</option>\r\n                        <option value=\"User\">User</option>\r\n                        <option value=\"Staff\">Staff</option>\r\n                        <option value=\"Admin\">Admin</option>\r\n                      </Input>\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col lg=\"3\" md=\"6\" sm=\"12\">\r\n                    <FormGroup className=\"mb-0\">\r\n                      <Label for=\"status\">Status</Label>\r\n                      <Input\r\n                        type=\"select\"\r\n                        name=\"status\"\r\n                        id=\"status\"\r\n                        value={this.state.selectStatus}\r\n                        onChange={(e) => {\r\n                          this.setState(\r\n                            {\r\n                              selectStatus: e.target.value,\r\n                            },\r\n                            () =>\r\n                              this.filterData(\r\n                                \"status\",\r\n                                this.state.selectStatus.toLowerCase()\r\n                              )\r\n                          );\r\n                        }}\r\n                      >\r\n                        <option value=\"All\">All</option>\r\n                        <option value=\"Active\">Active</option>\r\n                        <option value=\"Blocked\">Blocked</option>\r\n                        <option value=\"Deactivated\">Deactivated</option>\r\n                      </Input>\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col lg=\"3\" md=\"6\" sm=\"12\">\r\n                    <FormGroup className=\"mb-0\">\r\n                      <Label for=\"verified\">Verified</Label>\r\n                      <Input\r\n                        type=\"select\"\r\n                        name=\"verified\"\r\n                        id=\"verified\"\r\n                        value={this.state.verified}\r\n                        onChange={(e) => {\r\n                          this.setState(\r\n                            {\r\n                              verified: e.target.value,\r\n                            },\r\n                            () =>\r\n                              this.filterData(\r\n                                \"is_verified\",\r\n                                this.state.verified.toLowerCase()\r\n                              )\r\n                          );\r\n                        }}\r\n                      >\r\n                        <option value=\"All\">All</option>\r\n                        <option value=\"True\">True</option>\r\n                        <option value=\"False\">False</option>\r\n                      </Input>\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col lg=\"3\" md=\"6\" sm=\"12\">\r\n                    <FormGroup className=\"mb-0\">\r\n                      <Label for=\"department\">Department</Label>\r\n                      <Input\r\n                        type=\"select\"\r\n                        name=\"department\"\r\n                        id=\"department\"\r\n                        value={this.state.department}\r\n                        onChange={(e) => {\r\n                          this.setState(\r\n                            {\r\n                              department: e.target.value,\r\n                            },\r\n                            () =>\r\n                              this.filterData(\r\n                                \"department\",\r\n                                this.state.department.toLowerCase()\r\n                              )\r\n                          );\r\n                        }}\r\n                      >\r\n                        <option value=\"All\">All</option>\r\n                        <option value=\"Sales\">Sales</option>\r\n                        <option value=\"Development\">Development</option>\r\n                        <option value=\"Management\">Management</option>\r\n                      </Input>\r\n                    </FormGroup>\r\n                  </Col>\r\n                </Row>\r\n              </CardBody>\r\n            </Collapse>\r\n          </Card>\r\n        </Col> */}\r\n        <Col sm=\"12\">\r\n          <Card>\r\n            <CardBody>\r\n              <div className=\"ag-theme-material ag-grid-table\">\r\n                <div className=\"ag-grid-actions d-flex justify-content-between flex-wrap mb-1\">\r\n                  <div className=\"sort-dropdown\">\r\n                    <UncontrolledDropdown className=\"ag-dropdown p-1\">\r\n                      <DropdownToggle tag=\"div\">\r\n                        1 - {pageSize} of 150\r\n                        <ChevronDown className=\"ml-50\" size={15} />\r\n                      </DropdownToggle>\r\n                      <DropdownMenu right>\r\n                        <DropdownItem\r\n                          tag=\"div\"\r\n                          onClick={() => this.filterSize(20)}\r\n                        >\r\n                          20\r\n                        </DropdownItem>\r\n                        <DropdownItem\r\n                          tag=\"div\"\r\n                          onClick={() => this.filterSize(50)}\r\n                        >\r\n                          50\r\n                        </DropdownItem>\r\n                        <DropdownItem\r\n                          tag=\"div\"\r\n                          onClick={() => this.filterSize(100)}\r\n                        >\r\n                          100\r\n                        </DropdownItem>\r\n                        <DropdownItem\r\n                          tag=\"div\"\r\n                          onClick={() => this.filterSize(150)}\r\n                        >\r\n                          150\r\n                        </DropdownItem>\r\n                      </DropdownMenu>\r\n                    </UncontrolledDropdown>\r\n                  </div>\r\n                  <div className=\"filter-actions d-flex\">\r\n                    <Input\r\n                      className=\"w-50 mr-1 mb-1 mb-sm-0\"\r\n                      type=\"text\"\r\n                      placeholder=\"search...\"\r\n                      onChange={(e) => this.updateSearchQuery(e.target.value)}\r\n                      value={this.state.searchVal}\r\n                    />\r\n                    <div className=\"dropdown actions-dropdown\">\r\n                      <UncontrolledButtonDropdown>\r\n                        <DropdownToggle className=\"px-2 py-75\" color=\"white\">\r\n                          Actions\r\n                          <ChevronDown className=\"ml-50\" size={15} />\r\n                        </DropdownToggle>\r\n                        <DropdownMenu right>\r\n                          <DropdownItem tag=\"a\">\r\n                            <Trash2 size={15} />\r\n                            <span className=\"align-middle ml-50\">Delete</span>\r\n                          </DropdownItem>\r\n                          <DropdownItem tag=\"a\">\r\n                            <Clipboard size={15} />\r\n                            <span className=\"align-middle ml-50\">Archive</span>\r\n                          </DropdownItem>\r\n                          <DropdownItem tag=\"a\">\r\n                            <Printer size={15} />\r\n                            <span className=\"align-middle ml-50\">Print</span>\r\n                          </DropdownItem>\r\n                          <DropdownItem tag=\"a\">\r\n                            <Download size={15} />\r\n                            <span className=\"align-middle ml-50\">CSV</span>\r\n                          </DropdownItem>\r\n                        </DropdownMenu>\r\n                      </UncontrolledButtonDropdown>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                {this.state.post !== null ? (\r\n                  <ContextLayout.Consumer>\r\n                    {(context) => (\r\n                      <AgGridReact\r\n                        gridOptions={{}}\r\n                        rowSelection=\"multiple\"\r\n                        defaultColDef={defaultColDef}\r\n                        columnDefs={columnDefs}\r\n                        rowData={post}\r\n                        onGridReady={this.onGridReady}\r\n                        colResizeDefault={\"shift\"}\r\n                        animateRows={true}\r\n                        floatingFilter={true}\r\n                        pagination={true}\r\n                        pivotPanelShow=\"always\"\r\n                        paginationPageSize={pageSize}\r\n                        resizable={true}\r\n                        enableRtl={context.state.direction === \"rtl\"}\r\n                      />\r\n                    )}\r\n                  </ContextLayout.Consumer>\r\n                ) : null}\r\n              </div>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserListView;\r\n"],"sourceRoot":""}